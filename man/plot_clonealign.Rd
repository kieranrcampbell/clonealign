% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting.R
\name{plot_clonealign}
\alias{plot_clonealign}
\title{Plot gene expression and copy number}
\usage{
plot_clonealign(sce, clones, cnv_data, chromosome = "1",
  chr_str = "chr", start_str = "start_position",
  end_str = "end_position", jitter_cnv = TRUE,
  ggplot_palette = "Set1", expression_ylim = c(-0.15, 0.15),
  cnv_dodge_sd = 0.1)
}
\arguments{
\item{sce}{A \code{SingleCellExperiment}. Note this must have the fields
\code{chr_str}, \code{start_str}, and \code{end_str} in \code{rowData}. See details.}

\item{clones}{The clone assignments of each cell - must be of the same set as the colnames of \code{L}}

\item{cnv_data}{The gene by clone copy number matrix used as input to \code{clonealign_fit}. The
genes (rows) of this must match to the genes in \code{sce}}

\item{chromosome}{The chromosome to plot}

\item{chr_str}{The column of \code{rowData(sce)} that refers to the chromosome of each feature}

\item{start_str}{The column of \code{rowData(sce)} that refers to the start position of each feature}

\item{end_str}{The column of \code{rowData(sce)} that refers to the end position of each feature}

\item{jitter_cnv}{Logical - if true random noise is added to the copy number profiles to help
display all clones in case two lie on top of each other}

\item{ggplot_palette}{The palette to be passed to \code{scale_colour_brewer}}

\item{expression_ylim}{The y axis limits on the smoothed expression plot}

\item{cnv_dodge_sd}{The standard deviation of the (0 mean) noise to add to the CNV plot}
}
\value{
A ggplot2 object displaying a CNV and gene expression track for each (inferred) clone
}
\description{
Plot gene expression and copy number as a function of genomic coordinate.
}
\details{
This function requires the chromosome, start, and end positions of each features to plot.
These are encoded as the \code{chr_str}, \code{start_str}, and \code{end_str} features
in \code{rowData(sce)} respectively. If we have ensembl ids or similar we can get add the
required fields using the \code{getBMFeatureAnnos} function in the \code{scater} package - \cr
\code{
sce <- getBMFeatureAnnos(sce, filters = "ensembl_gene_id",
                         attributes = c("chromosome_name", "start_position", "end_position"),
                         feature_symbol = "hgnc_symbol",
                         feature_id = "ensembl_gene_id",
                         dataset = "hsapiens_gene_ensembl")
} \cr
Then we would call \code{plot_clonealign} using \code{chr_str == "chromosome_name"}, \code{start_str == "start_position"},
and \code{end_str == "end_position"}.
}
\examples{
library(SingleCellExperiment)
library(scater)
library(dplyr)
data(example_clonealign_fit)
cnv_data <- rowData(example_sce)[,c("A", "B", "C")]
gene_position <- as_data_frame(cnv_data) \%>\%
mutate(gene = seq_len(nrow(cnv_data))) \%>\%
  arrange(A, B, C) \%>\%
 mutate(position = seq_len(nrow(cnv_data))) \%>\%
  arrange(gene) \%>\%
  .$position

rowData(example_sce)$chromosome <- "1"
rowData(example_sce)$start_pos <- gene_position
rowData(example_sce)$end_pos <- gene_position
example_sce <- normalize(example_sce)
plot_clonealign(example_sce, example_clonealign_fit$clone, cnv_data,
chromosome = "1",
chr_str = "chromosome",
start_str = "start_pos",
end_str = "end_pos")

}
