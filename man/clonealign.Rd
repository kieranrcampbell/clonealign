% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clonealign.R
\name{clonealign}
\alias{clonealign}
\title{Assign scRNA-seq to clone-of-origin}
\usage{
clonealign(gene_expression_data, copy_number_data, max_iter = 200,
  rel_tol = 1e-06, gene_filter_threshold = 0, learning_rate = 0.1,
  x = NULL, remove_outlying_genes = TRUE, nmads = 10,
  clone_allele = NULL, cov = NULL, ref = NULL, fix_alpha = FALSE,
  dtype = "float32", saturate = TRUE, saturation_threshold = 6,
  K = NULL, mc_samples = 1, verbose = TRUE, seed = NULL,
  initial_shrink = 5, clone_call_probability = 0.95,
  data_init_mu = TRUE)
}
\arguments{
\item{gene_expression_data}{A matrix of gene counts or a
\code{SingleCellExperiment}. This should contain raw counts. See \code{details}.}

\item{copy_number_data}{A matrix or data frame of copy number calls for each clone.
See \code{details}.}

\item{max_iter}{Maximum number of Variational Bayes iterations to perform}

\item{rel_tol}{Relative tolerance (change in ELBO per iteration in percent) below which the
inference is considered converged}

\item{gene_filter_threshold}{Genes with total counts below or equal to this threshold will
be filtered out (removes genes with no counts by default)}

\item{learning_rate}{The learning rate to be passed to the Adam optimizer}

\item{x}{An optional vector of covariates, e.g. corresponding to batch or patient. Can be a vector of a single
covariate or a sample by covariate matrix. Note this should not contain an intercept.}

\item{remove_outlying_genes}{Logical - should genes whose expression is an outlier wrt
all others be removed?}

\item{nmads}{The number of median absolute deviations (MADs) the per-gene mean of the 
raw counts is from the overall mean to be considered an outlier}

\item{clone_allele}{A clone-by-variant matrix of copy numbers for each variant}

\item{cov}{A cell-by-variant matrix of coverage counts}

\item{ref}{A cell-by-variant matrix of reference allele counts}

\item{fix_alpha}{Should the underlying priors for clone frequencies be fixed? Default TRUE
(values are inferred from the data)}

\item{dtype}{The dtype for tensorflow useage, either "float32" or "float64"}

\item{saturate}{Should the CNV-expression relationship saturate above copy number = \code{saturation_threshold}? Default TRUE}

\item{saturation_threshold}{If \code{saturate} is true, copy numbers above this will be reduced to the threshold}

\item{K}{The dimensionality of the expression latent space. If left \code{NULL}, K is set to 1 if fewer than 100 genes
are present and 6 otherwise.}

\item{mc_samples}{The number of Monte Carlo samples to use to estimate the ELBO}

\item{verbose}{Should warnings and EM convergence information be printed? Default TRUE}

\item{seed}{The random seed. See \code{details}.}

\item{initial_shrink}{The strength with which the variational parameters for clone assignments are
initially shrunk towards the most likely assignments. See \code{?run_clonealign}.}

\item{clone_call_probability}{The probability above which a cell is assigned to a clone. If no clone has probability greater
than this value, then the clone is "unassigned".}

\item{data_init_mu}{Should the mu parameters be initialized using the data? (This typically speeds up convergence)}
}
\value{
An object of class \code{clonealign_fit}. The maximum likelihood estimates of the
clone assignment paramters are in the \code{clone} slot. Maximum likelihood estimates of
all model parameters are in the \code{ml_params} slot.
}
\description{
\code{clonealign} assigns single cells (measured with RNA-seq) to their clones of origin, where
the clones have been inferred from ultra-shallow scDNA-seq and collated into copy number profiles.
}
\details{
\strong{Input format}

\code{gene_expression_data} must either be a \code{SingleCellExperiment} or \code{SummarizedExperiment}
with a \code{counts} assay
representing raw gene expression counts, or a cell by gene matrix of raw counts.

\code{copy_number_data} must either be a \code{matrix}, \code{data.frame} or \code{DataFrame} with a
row for each gene in \code{gene_expression_data} and a column for each of the clones.
If \code{colnames(copy_number_data)} is not \code{NULL} then these names will be used for each of
the clones in the final output.


\strong{Size factors}

If \code{size_factors == "fixed"}, the size factors will be set to the overall library size per cell
(total number of reads mapping to the cell).
If \code{size_factors == "infer"}, the size factors will be treated as a model paramter and jointly
optimized during inference.
Otherwise, \code{size_factors} can be a numeric vector of precomputed, custom size factors.

\strong{Recommended parameter settings}

As with any probabilistic model there are many parameters to set. Through comprehensive simulations regarding
the robustness of the model to mis-specification (ie what's the minimum proportion of genes for which the
CNV-expression relationship can be true and our inferences still valid) we have come up with the following
guidelines for parameter settings, reflected in the default values:

\itemize{
\item{Number of ADAM iterations - if set to 1 we essentially perform gradient descent on the marginal log-likelihood
which empircally appears to have the best performance}
\item{Dispersions should be clone-specific with weak shrinkage (\code{sigma} = 1 appears best)}
\item{The generating probabilities should be fixed to be a priori equal (this corresponds to setting \code{alpha = TRUE})}
\item{The cell size factors are best fixed in advanced by multiplying the total counts of whatever genes are passed
to clonealign by the edgeR (TMM) normalization factors}
}


\strong{Controlling Variational inference}

Inference is performed using reparametrization-gradient variational inference. Convergence is monitored via changes
to the evidence lower bound (ELBO) - this is controlled using the
\code{rel_tol} parameter. When the difference between the new and old ELBOs normalized
by the absolute value of the old falls below \code{rel_tol}, the  algorithm is considered converged.
The maximum number of iterations to acheive this is set using the \code{max_iter} parameter.

In each step, maximization is performed using Adam, with learning rate given by \code{learning_rate}.

\strong{Random seed}

The random seed can be set using the \code{seed} parameter. However, note that this disables GPU computation
and parallelism. See \url{https://tensorflow.rstudio.com/tensorflow/reference/use_session_with_seed.html}
for details.
}
\examples{
library(SingleCellExperiment)
data(example_sce)
copy_number_data <- rowData(example_sce)[,c("A", "B", "C")]
cal <- clonealign(example_sce, copy_number_data)
print(cal)
clones <- cal$clone
}
